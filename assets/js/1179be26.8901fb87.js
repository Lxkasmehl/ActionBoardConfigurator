"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[718],{6973:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/flow-w-expand-and-multiple-props-7ed5f3e288fd39d51f0617ce1175c28c.gif"},7089:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"user-guide/data-picker","title":"Data Picker","description":"The Data Picker is a powerful tool for selecting and filtering data from SAP SuccessFactors. This guide explains how to use it effectively with practical examples.","source":"@site/docs/user-guide/data-picker.md","sourceDirName":"user-guide","slug":"/user-guide/data-picker","permalink":"/WebAppConfigurator/docs/user-guide/data-picker","draft":false,"unlisted":false,"editUrl":"https://github.com/pentos/webappconfigurator/tree/main/docs/user-guide/data-picker.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Basic Features","permalink":"/WebAppConfigurator/docs/user-guide/basic-features"},"next":{"title":"UI Builder","permalink":"/WebAppConfigurator/docs/user-guide/ui-builder"}}');var l=n(4848),r=n(8453);const s={sidebar_position:3},o="Data Picker",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Example Data Flow Configurations",id:"example-data-flow-configurations",level:2},{value:"1. Simple Flow with a Single Entity and Selected Property",id:"1-simple-flow-with-a-single-entity-and-selected-property",level:3},{value:"2. Simple Flow with a Basic Filter",id:"2-simple-flow-with-a-basic-filter",level:3},{value:"3. Multiple Properties and Navigation Property Expansion",id:"3-multiple-properties-and-navigation-property-expansion",level:3},{value:"4. Complex Filter with Navigation Properties",id:"4-complex-filter-with-navigation-properties",level:3},{value:"5. Complex Flow Using Results from One Request in Another",id:"5-complex-flow-using-results-from-one-request-in-another",level:3},{value:"Building Your Own Data Flow",id:"building-your-own-data-flow",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"1. Creating Complex Filters",id:"1-creating-complex-filters",level:3},{value:"2. Expand Properties to Multiple Levels",id:"2-expand-properties-to-multiple-levels",level:3}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"data-picker",children:"Data Picker"})}),"\n",(0,l.jsx)(i.p,{children:"The Data Picker is a powerful tool for selecting and filtering data from SAP SuccessFactors. This guide explains how to use it effectively with practical examples."}),"\n",(0,l.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(i.p,{children:"The Data Picker is a visual interface that allows you to build complex data queries by combining entities, filters, and properties. It provides a drag-and-drop interface for creating data flows that can be used in your UI components."}),"\n",(0,l.jsx)(i.h2,{id:"example-data-flow-configurations",children:"Example Data Flow Configurations"}),"\n",(0,l.jsx)(i.h3,{id:"1-simple-flow-with-a-single-entity-and-selected-property",children:"1. Simple Flow with a Single Entity and Selected Property"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"Simple Flow",src:n(7521).A+"",width:"1204",height:"686"})}),"\n",(0,l.jsx)(i.p,{children:"This example demonstrates how to fetch all candidateIds from the backend:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Connect the Entity Section to the Flow start"}),"\n",(0,l.jsx)(i.li,{children:"Select the Candidate entity"}),"\n",(0,l.jsx)(i.li,{children:"Choose the candidateId property"}),"\n",(0,l.jsx)(i.li,{children:'Click "Send Request" and verify the results'}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"2-simple-flow-with-a-basic-filter",children:"2. Simple Flow with a Basic Filter"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"Simple Flow With Simple Filter",src:n(9635).A+"",width:"1204",height:"686"})}),"\n",(0,l.jsx)(i.p,{children:"Building on the previous example, we'll now fetch the address of a specific candidate:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Connect the Entity Section to the Flow start"}),"\n",(0,l.jsx)(i.li,{children:"Select the Candidate entity"}),"\n",(0,l.jsx)(i.li,{children:'Click "Add Filter"'}),"\n",(0,l.jsx)(i.li,{children:"Configure the filter (in this example, candidateId = 81)"}),"\n",(0,l.jsx)(i.li,{children:"Save the filter"}),"\n",(0,l.jsx)(i.li,{children:"Select the address property in the Entity Section"}),"\n",(0,l.jsx)(i.li,{children:'Click "Send Request" and verify the results'}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"3-multiple-properties-and-navigation-property-expansion",children:"3. Multiple Properties and Navigation Property Expansion"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"Flow with expand Functionality and multiple selected properties",src:n(6973).A+"",width:"1204",height:"686"})}),"\n",(0,l.jsx)(i.p,{children:"This example shows how to expand navigation properties and select multiple properties:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Connect the Entity Section to the Flow start"}),"\n",(0,l.jsx)(i.li,{children:"Select the JobRequisition entity"}),"\n",(0,l.jsx)(i.li,{children:"Choose the hiringManager property (a navigation property that links to another entity)"}),"\n",(0,l.jsx)(i.li,{children:"In the accordion that opens, select properties of the hiringManager"}),"\n",(0,l.jsx)(i.li,{children:"For the hiringManager, we'll select firstName and lastName"}),"\n",(0,l.jsx)(i.li,{children:'Click "Send Request" and verify the results'}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"4-complex-filter-with-navigation-properties",children:"4. Complex Filter with Navigation Properties"}),"\n",(0,l.jsx)(i.p,{children:"This example demonstrates creating a more complex filter using navigation properties:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Connect the Entity Section to the Flow start"}),"\n",(0,l.jsx)(i.li,{children:"Select the JobRequisition entity"}),"\n",(0,l.jsx)(i.li,{children:'Click "Add Filter"'}),"\n",(0,l.jsx)(i.li,{children:"Configure the first filter condition by selecting the age property and setting the filter to > 900"}),"\n",(0,l.jsx)(i.li,{children:'Add another condition using the "Add Condition" button'}),"\n",(0,l.jsx)(i.li,{children:"In the new condition, select the hiringManager property. Since hiringManager is a navigation property, an additional autocomplete will appear for selecting the hiringManager's property"}),"\n",(0,l.jsx)(i.li,{children:'Select the hiringManager\'s lastName and set the condition to = "TU"'}),"\n",(0,l.jsx)(i.li,{children:"Save the filter"}),"\n",(0,l.jsx)(i.li,{children:"Select the coordinator property in the Entity Section"}),"\n",(0,l.jsx)(i.li,{children:"Since coordinator is a navigation property, select its firstName"}),"\n",(0,l.jsx)(i.li,{children:'Click "Send Request" and verify the results'}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"5-complex-flow-using-results-from-one-request-in-another",children:"5. Complex Flow Using Results from One Request in Another"}),"\n",(0,l.jsx)(i.p,{children:"This example shows how to create a flow with multiple entity sections, where the results from one request are used as a filter in another:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Connect the Entity Section to the Flow start"}),"\n",(0,l.jsx)(i.li,{children:"Select the desired entity"}),"\n",(0,l.jsx)(i.li,{children:"Select the required property without creating a filter"}),"\n",(0,l.jsx)(i.li,{children:'Optionally, click "Send Request" to verify the results'}),"\n",(0,l.jsx)(i.li,{children:"Use the plus button in the bottom right to add a second Entity Section"}),"\n",(0,l.jsx)(i.li,{children:'Instead of connecting to the flow start, connect the "OK" node of the first entity section to the "IN" button of the new Entity Section'}),"\n",(0,l.jsx)(i.li,{children:"Select the desired entity in the new Entity Section"}),"\n",(0,l.jsx)(i.li,{children:'Click "Add Filter" in the new Entity Section'}),"\n",(0,l.jsx)(i.li,{children:"Create a condition with the desired property"}),"\n",(0,l.jsx)(i.li,{children:"In the filter value dropdown, select one of the values fetched by the first Entity Section"}),"\n",(0,l.jsx)(i.li,{children:"Save the filter configuration"}),"\n",(0,l.jsx)(i.li,{children:"Select the desired property"}),"\n",(0,l.jsx)(i.li,{children:'Click "Send Request" and verify the results'}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"building-your-own-data-flow",children:"Building Your Own Data Flow"}),"\n",(0,l.jsx)(i.p,{children:"When building your own data flow, consider these key points:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Start with a clear understanding of what data you need"}),"\n",(0,l.jsx)(i.li,{children:"Choose the appropriate entity for your use case"}),"\n",(0,l.jsx)(i.li,{children:"Use filters to narrow down the results"}),"\n",(0,l.jsx)(i.li,{children:"Select only the properties you need"}),"\n",(0,l.jsx)(i.li,{children:"Use navigation properties to access related data"}),"\n",(0,l.jsx)(i.li,{children:'Test your flow with the "Send Request" button before using it in your UI'}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Performance Optimization"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Select only the properties you need"}),"\n",(0,l.jsx)(i.li,{children:"Use specific filters to limit the result set"}),"\n",(0,l.jsx)(i.li,{children:"Avoid unnecessary navigation property expansions"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Data Flow Structure"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Keep flows as simple as possible"}),"\n",(0,l.jsx)(i.li,{children:"Use meaningful names for your flows"}),"\n",(0,l.jsx)(i.li,{children:"Document complex flows with comments"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Error Handling"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Always test your flows before using them in production"}),"\n",(0,l.jsx)(i.li,{children:"Handle potential null values in navigation properties"}),"\n",(0,l.jsx)(i.li,{children:"Consider edge cases in your filters"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(i.p,{children:"Common issues and their solutions:"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Request Failures"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Check entity and property names"}),"\n",(0,l.jsx)(i.li,{children:"Verify filter syntax"}),"\n",(0,l.jsx)(i.li,{children:"Ensure proper connection between entity sections"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Navigation Property Issues"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Verify the relationship between entities"}),"\n",(0,l.jsx)(i.li,{children:"Check if the navigation property exists"}),"\n",(0,l.jsx)(i.li,{children:"Ensure proper property selection in expanded entities"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"Filter Problems"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Verify filter syntax"}),"\n",(0,l.jsx)(i.li,{children:"Check data types of filter values"}),"\n",(0,l.jsx)(i.li,{children:"Ensure proper operator usage"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,l.jsx)(i.h3,{id:"1-creating-complex-filters",children:"1. Creating Complex Filters"}),"\n",(0,l.jsxs)(i.p,{children:["To enable comprehensive filtering capabilities, the Data Picker supports the creation of complex filters with nested conditions. For example, you can create scenarios like ",(0,l.jsx)(i.code,{children:"((conditionX = 1 AND conditionY = 2) OR (conditionZ = 3 AND conditionA = 4))"}),'. To build such complex filters in the filter modal, use Condition Groups. The modal provides two buttons at the bottom: "Add Condition" and "Add Condition Group".']}),"\n",(0,l.jsx)(i.p,{children:"Key features of complex filtering:"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Multiple condition groups can be connected using the same logical operator"}),"\n",(0,l.jsx)(i.li,{children:"Within a condition group, you can add any number of conditions using the same logical operator"}),"\n",(0,l.jsx)(i.li,{children:"While not every possible filter combination can be created, this structure supports most common filtering scenarios"}),"\n",(0,l.jsx)(i.li,{children:"Condition groups help organize complex logical expressions in a clear and maintainable way"}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"2-expand-properties-to-multiple-levels",children:"2. Expand Properties to Multiple Levels"}),"\n",(0,l.jsx)(i.p,{children:"As we've seen in previous examples, you can expand navigation properties to access related data, such as selecting the first name of a hiring manager from a JobRequisition. This capability extends to deeply nested properties as well. For instance, you could access the address line 1 of a manager's manager's manager's manager under a User entity."}),"\n",(0,l.jsx)(i.p,{children:"Key benefits of multi-level property expansion:"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:"Access data from deeply nested relationships"}),"\n",(0,l.jsx)(i.li,{children:"Build complex data queries without multiple requests"}),"\n",(0,l.jsx)(i.li,{children:"Maintain data context through the relationship chain"}),"\n",(0,l.jsx)(i.li,{children:"Efficiently retrieve related information in a single request"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},7521:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/simple-flow-de340ef0e3514e160c69f7e403a941c6.gif"},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>o});var t=n(6540);const l={},r=t.createContext(l);function s(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:i},e.children)}},9635:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/simple-flow-w-simple-filter-c711223e501bd637f20613bf8358f987.gif"}}]);