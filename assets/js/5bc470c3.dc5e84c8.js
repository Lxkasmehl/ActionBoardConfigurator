"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[900],{6200:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"user-guide/ui-builder","title":"UI Builder","description":"Overview","source":"@site/docs/user-guide/ui-builder.md","sourceDirName":"user-guide","slug":"/user-guide/ui-builder","permalink":"/WebAppConfigurator/docs/user-guide/ui-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/pentos/webappconfigurator/tree/main/docs/user-guide/ui-builder.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Data Picker","permalink":"/WebAppConfigurator/docs/user-guide/data-picker"},"next":{"title":"Frequently Asked Questions","permalink":"/WebAppConfigurator/docs/user-guide/faq"}}');var r=i(4848),o=i(8453);const l={sidebar_position:4},s="UI Builder",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Components in Detail",id:"components-in-detail",level:2},{value:"Heading Component",id:"heading-component",level:3},{value:"Paragraph Component",id:"paragraph-component",level:3},{value:"Button Component",id:"button-component",level:3},{value:"Image Component",id:"image-component",level:3},{value:"FilterArea, ButtonBar, and Table",id:"filterarea-buttonbar-and-table",level:3},{value:"Setting Up the Group",id:"setting-up-the-group",level:4},{value:"Configuring the Components",id:"configuring-the-components",level:4},{value:"Chart Component",id:"chart-component",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ui-builder",children:"UI Builder"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The UI Builder is a powerful drag-and-drop interface that allows you to create web applications by combining pre-built components. It provides a visual way to design and configure your application's user interface, with real-time preview capabilities and seamless integration with backend data."}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.p,{children:"To start using the UI Builder, it's important to understand its structure. The interface consists of two main areas:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Library (Left Side)"}),": Contains pre-built components that you can use to build your web application"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preview Area (Right Side)"}),": Shows a live preview of your web application as you build it"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To use a component, simply drag it from the library into the preview area. Components can be arranged freely within the preview area. To remove a component, drag it to the trash icon at the bottom of the screen."}),"\n",(0,r.jsx)(n.p,{children:'The "Create/Edit Group" button in the lower left corner is essential for properly using FilterArea, ButtonBar, Table, and Chart components together (more details in their respective sections).'}),"\n",(0,r.jsx)(n.p,{children:'The "Export Website" button in the upper right corner is used for the final step - exporting your completed web application. Clicking this button will download a ZIP file containing a complete, standalone React project with your finished web application.'}),"\n",(0,r.jsx)(n.h2,{id:"components-in-detail",children:"Components in Detail"}),"\n",(0,r.jsx)(n.h3,{id:"heading-component",children:"Heading Component"}),"\n",(0,r.jsx)(n.p,{children:"The Heading Component is a text component designed for titles and section headers. After dragging it into the preview area, you can edit its content in two ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Static Text"}),": Simply enter the text you want to display as a heading"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Content"}),": Use double square brackets ",(0,r.jsx)(n.code,{children:"[["})," to open the DataPicker modal, where you can select a flow to fetch data from the backend"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If the selected DataPicker flow returns a single string, it will be displayed directly. For multiple strings, a modal will open allowing you to select the specific string to display. The content updates automatically when the backend data changes, making it fully dynamic."}),"\n",(0,r.jsx)(n.h3,{id:"paragraph-component",children:"Paragraph Component"}),"\n",(0,r.jsx)(n.p,{children:"The Paragraph Component functions exactly like the Heading Component but is designed for body text. The main difference is in the formatting - paragraphs are styled to display longer text in a less prominent way. The editing process remains the same as the Heading Component."}),"\n",(0,r.jsx)(n.h3,{id:"button-component",children:"Button Component"}),"\n",(0,r.jsx)(n.p,{children:"The Button Component is currently under development. It will provide interactive elements for user actions within your application."}),"\n",(0,r.jsx)(n.h3,{id:"image-component",children:"Image Component"}),"\n",(0,r.jsx)(n.p,{children:"The Image Component is the simplest component, designed solely for displaying images. When inserted, it initially shows a placeholder image. Clicking the edit button opens a modal where you can either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Upload an image to display"}),"\n",(0,r.jsx)(n.li,{children:"Insert a link to an external image"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"filterarea-buttonbar-and-table",children:"FilterArea, ButtonBar, and Table"}),"\n",(0,r.jsx)(n.p,{children:"These three components are designed to work together, with the Table being the core component. While the Table can function independently, FilterArea and ButtonBar require proper grouping to work effectively."}),"\n",(0,r.jsx)(n.h4,{id:"setting-up-the-group",children:"Setting Up the Group"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Place the components anywhere in your web application"}),"\n",(0,r.jsx)(n.li,{children:'Click "Create/Edit Group" followed by "Create Group"'}),"\n",(0,r.jsx)(n.li,{children:"Name the group for future reference"}),"\n",(0,r.jsx)(n.li,{children:"Select all components that should belong to the group"}),"\n",(0,r.jsx)(n.li,{children:"Once created, the components will be highlighted with matching colored borders"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"configuring-the-components",children:"Configuring the Components"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Table Configuration"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Click the three dots in a column header to configure it"}),"\n",(0,r.jsxs)(n.li,{children:["Choose between:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple Entity-Property combination"}),"\n",(0,r.jsx)(n.li,{children:"DataPicker as the data source for more specific requirements"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Set the Main Entity for the table"}),"\n",(0,r.jsx)(n.li,{children:"Combine multiple properties in a single column if needed"}),"\n",(0,r.jsx)(n.li,{children:"Set column labels"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"FilterArea Configuration"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add or remove filters as needed"}),"\n",(0,r.jsx)(n.li,{children:"Click the edit button on a filter to select which table column it should filter"}),"\n",(0,r.jsx)(n.li,{children:"Available values from the selected column will appear as filter options"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ButtonBar Configuration"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Click the edit button to open the configuration modal"}),"\n",(0,r.jsx)(n.li,{children:"Select which buttons to display"}),"\n",(0,r.jsx)(n.li,{children:"Arrange the buttons in your preferred order"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"chart-component",children:"Chart Component"}),"\n",(0,r.jsx)(n.p,{children:"While the Chart Component could be grouped with FilterArea, ButtonBar, and Table, it's discussed separately for clarity. It only functions when grouped with a Table component. Through the edit button, you can:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select which table column to display graphically"}),"\n",(0,r.jsx)(n.li,{children:"Choose between Bar and Pie chart visualizations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example use case: If you have a table displaying User entity properties including gender, you can create a chart showing the gender distribution by using that column as the data source."}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Component Organization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Group related components together"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate spacing and layout"}),"\n",(0,r.jsx)(n.li,{children:"Maintain consistent styling across components"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data Integration"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use the DataPicker for dynamic content"}),"\n",(0,r.jsx)(n.li,{children:"Ensure proper entity relationships"}),"\n",(0,r.jsx)(n.li,{children:"Test data flow before finalizing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User Experience"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keep the interface clean and intuitive"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate component types for different data"}),"\n",(0,r.jsx)(n.li,{children:"Implement filters and buttons logically"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(6540);const r={},o=t.createContext(r);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);